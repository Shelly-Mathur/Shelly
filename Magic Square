def generate_magic_square(n):
    if n % 2 == 0:
        raise ValueError("Only odd-order magic squares are supported with this method.")

    # Initialize an empty matrix
    magic_square = [[0] * n for _ in range(n)]

    # Start position: middle of the first row
    i, j = 0, n // 2

    for num in range(1, n * n + 1):
        magic_square[i][j] = num  # Place the current number

        # Calculate the next position
        new_i, new_j = (i - 1) % n, (j + 1) % n

        if magic_square[new_i][new_j] != 0:  # If the position is already filled
            new_i, new_j = (i + 1) % n, j  # Move down instead

        # Update position
        i, j = new_i, new_j

    return magic_square

# Example usage
n = 3  # Change this to any odd number
magic_square = generate_magic_square(n)

# Print the magic square
for row in magic_square:
    print(row)
